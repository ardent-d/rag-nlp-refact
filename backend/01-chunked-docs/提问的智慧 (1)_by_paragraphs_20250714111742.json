{
  "filename": "提问的智慧 (1).pdf",
  "total_chunks": 19,
  "total_pages": 19,
  "loading_method": "pymupdf",
  "chunking_method": "by_paragraphs",
  "timestamp": "2025-07-14T11:17:42.786218",
  "chunks": [
    {
      "content": "提问的智慧\n \n来源：https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.m\nd\nHow To Ask Questions The Smart Way\nCopyright © 2001,2006,2014 Eric S. Raymond, Rick Moen\n本指南英⽂版版权为 Eric S. Raymond, Rick Moen 所有。\n原⽂⽹址：http://www.catb.org/~esr/faqs/smart-questions.html\nCopyleft 2001 by D.H.Grand(nOBODY/Ginux), 2010 by Gasolin, 2015 by Ryan Wu\n本中⽂指南是基于原⽂ 3.10 版以及 2010 年由 Gasolin 所翻译版本的最新翻译；\n协助指出翻译问题，请发 issue，或直接发 pull request 给我。\n本⽂另有繁體中⽂版。\n原⽂版本历史\n \n \n⽬录\n \n \n声明\n简介\n在提问之前\n当你提问时\n慎选提问的论坛\nStack Overflow\n⽹站和 IRC 论坛\n第⼆步，使⽤项⽬邮件列表\n使⽤有意义且描述明确的标题\n使问题容易回复\n使⽤清晰、正确、精准且合乎语法的语句\n使⽤易于读取且标准的⽂件格式发送问题\n精确地描述问题并⾔之有物\n话不在多⽽在精\n别动辄声称找到 Bug\n低声下⽓不能代替你的功课",
      "metadata": {
        "chunk_id": 1,
        "page_number": 1,
        "page_range": "1",
        "word_count": 72
      }
    },
    {
      "content": "描述问题症状⽽⾮你的猜测\n按发⽣时间先后列出问题症状\n描述⽬标⽽不是过程\n别要求使⽤私⼈电邮回复\n清楚明确地表达你的问题以及需求\n询问有关代码的问题时\n别把⾃⼰家庭作业的问题贴上来\n去掉⽆意义的提问句\n即使你很急也不要在标题写紧急\n礼多⼈不怪，⽽且有时还很有帮助\n问题解决后，加个简短的补充说明\n如何解读答案\nRTFM 和 STFW：如何知道你已完全搞砸了\n如果还是搞不懂\n处理⽆礼的回应\n如何避免扮演失败者\n不该问的问题\n好问题与蠢问题\n如果得不到回答\n如何更好地回答问题\n相关资源\n鸣谢\n声明\n \n \n许多项⽬在他们⽹站的帮助⽂档中链接了本指南。这很好，这正是我们想要的⽤途。但如果你是该项⽬管理员并试\n图创建指向本指南的超链接，请在超链接附近的显著位置注明：\n本指南不提供此项⽬的实际⽀持服务！\n我们已经深刻领教到缺少上述声明所带来的痛苦：我们将不停地被那些认为发布这本指南就意味着有责任解决世上\n所有技术问题的傻⽠苦苦纠缠。\n如果你因寻求某些帮助⽽阅读本指南，并在离开时还觉得可以从本⽂作者这⾥得到直接帮助，那你就是我们之前说\n的那些傻⽠之⼀。别问我们问题，我们只会忽略你。我们在这本指南中想教你如何从那些真正懂得你所遇到的软件\n或硬件问题的⼈处取得协助，⽽ 99% 的情况下那不会是我们。除⾮你确定本指南的作者之⼀刚好是你所遇到的问\n题领域的专家，否则请不要打扰我们，这样⼤家都会开⼼⼀点。\n简介",
      "metadata": {
        "chunk_id": 2,
        "page_number": 2,
        "page_range": "2",
        "word_count": 37
      }
    },
    {
      "content": "在⿊客的世界⾥，你所提技术问题的解答的好坏, 很⼤程度上取决于你提问的⽅式与此问题的难度。本指南将教你\n如何正确地提问以获得你满意的答案。\n现在开源（Open Source）软件已经相当盛⾏，您通常可以从其他更有经验的⽤户那⾥获得与⿊客⼀样好的答案，\n这是件好事；和⿊客相⽐，⽤户们往往对那些新⼿常遇到的问题更宽容⼀些。尽管如此，以我们在此推荐的⽅式对\n待这些有经验的⽤户通常也是从他们那⾥获得有⽤答案的最有效⽅式。\n⾸先你应该明⽩，⿊客们喜爱有挑战性的问题，或者能激发他们思维的好问题。如果我们并⾮如此，那我们也不会\n成为你想询问的对象。如果你给了我们⼀个值得反复咀嚼玩味的好问题，我们⾃会对你感激不尽。好问题是激励，\n是厚礼。好问题可以提⾼我们的理解⼒，⽽且通常会暴露我们以前从没意识到或者思考过的问题。对⿊客⽽⾔，\n“好问题！”是诚挚的⼤⼒称赞。\n尽管如此，⿊客们有着蔑视或傲慢⾯对简单问题的坏名声，这有时让我们看起来对新⼿、⽆知者似乎较有敌意，但\n其实不是那样的。\n我们不讳⾔我们对那些不愿思考、或者在发问前不做他们该做的事的⼈的蔑视。那些⼈是时间杀⼿ —— 他们只想\n索取，从不付出，消耗我们可⽤在更有趣的问题或更值得回答的⼈身上的时间。我们称这样的⼈为 失败者\n（loser） （由于历史原因，我们有时把它拼作 lusers ）。\n我们意识到许多⼈只是想使⽤我们写的软件，他们对学习技术细节没有兴趣。对⼤多数⼈⽽⾔，电脑只是种⼯具，\n是种达到⽬的的⼿段⽽已。他们有⾃⼰的⽣活并且有更要紧的事要做。我们认可这点，也从不指望每个⼈都对这些\n让我们着迷的技术问题感兴趣。尽管如此，我们只为那些真正有兴趣并愿意积极参与问题解决的⼈调整回答问题的\n⻛格。这点不会变，也不该变：否则，我们就是在最擅⻓的事情上降低效率。\n我们（在很⼤程度上）是⾃愿的，从繁忙的⽣活中抽出时间来解答疑惑，⽽且时常被提问淹没。所以我们⽆情地滤\n掉⼀些话题，特别是拋弃那些看起来像失败者的家伙，以便更⾼效地利⽤时间来回答赢家（winner）的问题。\n如果你厌恶我们的态度，⾼⾼在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 —— 事实\n上，我们⼤多数⼈⾮常乐意与你平等地交流，只要你付出⼩⼩努⼒来满⾜基本要求，我们就会欢迎你加⼊我们的⽂\n化。但让我们帮助那些不愿意帮助⾃⼰的⼈是没有效率的。⽆知没有关系，但装⽩痴就是不⾏。\n所以，你不必在技术上很在⾏才能吸引我们的注意，但你必须表现出能引导你变得在⾏的特质 —— 机敏、有想\n法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司\n签个技术⽀持服务合同，⽽不是要求⿊客个⼈⽆偿地帮助你。\n如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的⼀员。能⽴刻得到快速并有效答案\n的最好⽅法，就是像赢家那样提问 —— 聪明、⾃信、有解决问题的思路，只是偶尔在特定的问题上需要获得⼀点\n帮助。\n（欢迎对本指南提出改进意⻅。你可以把你的建议发送⾄ esr@thyrsus.com 或 respond-auto@linuxmafia.com。\n然⽽请注意，本⽂并⾮⽹络礼节的通⽤指南，⽽我们通常会拒绝⽆助于在技术论坛得到有⽤答案的建议）。\n在提问之前\n \n \n在你准备要通过电⼦邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：\n1. 尝试在你准备提问的论坛的旧⽂章中搜索答案。\n2. 尝试上⽹搜索以找到答案。\n3. 尝试阅读⼿册以找到答案。",
      "metadata": {
        "chunk_id": 3,
        "page_number": 3,
        "page_range": "3",
        "word_count": 56
      }
    },
    {
      "content": "4. 尝试阅读常⻅问题⽂件（FAQ）以找到答案。\n5. 尝试⾃⼰检查或试验以找到答案。\n6. 向你身边的强者朋友打听以找到答案。\n7. 如果你是程序开发者，请尝试阅读源代码以找到答案。\n当你提出问题的时候，请先表明你已经做了上述的努⼒；这将有助于树⽴你并不是⼀个不劳⽽获且浪费别⼈的时间\n的提问者。如果你能⼀并表达在做了上述努⼒的过程中所学到的东⻄会更好，因为我们更乐于回答那些表现出能从\n答案中学习的⼈的问题。\n运⽤某些策略，⽐如先⽤ Google 搜索你所遇到的各种错误信息（搜索 Google 论坛和⽹⻚），这样很可能直接就\n找到了能解决问题的⽂件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上⼀句 我在 Google \n中搜过下列句⼦但没有找到什么有⽤的东⻄ 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加\n上搜索过的字串）也让遇到相似问题的其他⼈能被搜索引擎引导到你的提问来。\n别着急，不要指望⼏秒钟的 Google 搜索就能解决⼀个复杂的问题。在向专家求助之前，再阅读⼀下常⻅问题⽂件\n（FAQ）、放轻松、坐得舒服⼀些，再花点时间思考⼀下这个问题。相信我们，他们能从你的提问看出你做了多少\n阅读与思考，如果你是有备⽽来，将更有可能得到解答。不要将所有问题⼀股脑拋出，只因你的第⼀次搜索没有找\n到答案（或者找到太多答案）。\n准备好你的问题，再将问题仔细地思考过⼀遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。\n越是能表现出在寻求帮助前你为解决问题所付出的努⼒，你越有可能得到实质性的帮助。\n⼩⼼别问错了问题。如果你的问题基于错误的假设，某个普通⿊客（J. Random Hacker）多半会⼀边在⼼⾥想着\n蠢问题… ，⼀边⽤⽆意义的字⾯解释来答复你，希望着你会从问题的回答（⽽⾮你想得到的答案）中汲取教训。\n绝不要⾃以为够格得到答案，你没有；你并没有。毕竟你没有为这种服务⽀付任何报酬。你将会是⾃⼰去挣到⼀个\n答案，靠提出有内涵的、有趣的、有思维激励作⽤的问题 —— ⼀个有潜⼒能贡献社区经验的问题，⽽不仅仅是被\n动地从他⼈处索取知识。\n另⼀⽅⾯，表明你愿意在找答案的过程中做点什么是⼀个⾮常好的开端。谁能给点提示？、我的这个例⼦⾥缺了什\n么？以及我应该检查什么地⽅⽐请把我需要的确切的过程贴出来更容易得到答复。因为你表现出只要有⼈能指个正确\n⽅向，你就有完成它的能⼒和决⼼。\n当你提问时\n \n \n慎选提问的论坛\n \n \n⼩⼼选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：\n在与主题不合的论坛上贴出你的问题。\n在探讨进阶技术问题的论坛张贴⾮常初级的问题；反之亦然。\n在太多的不同新闻群组上重复转贴同样的问题（cross-post）。\n向既⾮熟⼈也没有义务解决你问题的⼈发送私⼈电邮。\n⿊客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被⽆关的东⻄淹没。你不会想让这种事发⽣在⾃⼰身\n上的。",
      "metadata": {
        "chunk_id": 4,
        "page_number": 4,
        "page_range": "4",
        "word_count": 52
      }
    },
    {
      "content": "因此，第⼀步是找到对的论坛。再说⼀次，Google 和其它搜索引擎还是你的朋友，⽤它们来找到与你遭遇到困难\n的软硬件问题最相关的⽹站。通常那⼉都有常⻅问题（FAQ）、邮件列表及相关说明⽂件的链接。如果你的努⼒\n（包括阅读 FAQ）都没有结果，⽹站上也许还有报告 Bug（Bug-reporting）的流程或链接，如果是这样，链过去\n看看。\n向陌⽣的⼈或论坛发送邮件最可能是⻛险最⼤的事情。举例来说，别假设⼀个提供丰富内容的⽹⻚的作者会想充当\n你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 —— 如果你不确定，那就向别处发送，或者压根\n别发。\n在选择论坛、新闻群组或邮件列表时，别太相信它的名字，先看看 FAQ 或者许可书以弄清楚你的问题是否切题。\n发⽂前先翻翻已有的话题，这样可以让你感受⼀下那⾥的⽂化。事实上，事先在新闻组或邮件列表的历史记录中搜\n索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。\n别像机关枪似的⼀次“扫射”所有的帮助渠道，这就像⼤喊⼤叫⼀样会使⼈不快。要⼀个⼀个地来。\n搞清楚你的主题！最典型的错误之⼀是在某种致⼒于跨平台可移植的语⾔、套件或⼯具的论坛中提关于 Unix 或 \nWindows 操作系统程序界⾯的问题。如果你不明⽩为什么这是⼤错，最好在搞清楚这之间差异之前什么也别问。\n⼀般来说，在仔细挑选的公共论坛中提问，会⽐在私有论坛中提同样的问题更容易得到有⽤的回答。有⼏个理由可\n以⽀持这点，⼀是看潜在的回复者有多少，⼆是看观众有多少。⿊客较愿意回答那些能帮助到许多⼈的问题。\n可以理解的是，⽼练的⿊客和⼀些热⻔软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草⼀\n样，你的加⼊也有可能使情况⾛向极端 —— 已经好⼏次了，⼀些热⻔软件的作者由于涌⼊其私⼈邮箱的⼤量不堪\n忍受的⽆⽤邮件⽽不再提供⽀持。\nStack Overflow\n \n \n搜索，然后在 Stack Exchange 问。\n近年来，Stack Exchange 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项⽬。\n因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很⾼的⼏率某⼈已经问了⼀个类似\n的问题，⽽且 Stack Exchange ⽹站们往往会是搜索结果中最前⾯⼏个。如果你在 Google 上没有找到任何答案，\n你再到特定相关主题的⽹站去找。⽤标签（Tag）搜索能让你更缩⼩你的搜索结果。\n如果你还是找不到任何对你的问题有⽤的内容，请把你的问题发在与它最相关的⽹站上。提问的时候请善⽤格式化\n⼯具，尤其注意为代码添加格式，并且添加相关的标签（特别是编程语⾔、操作系统或库/包的名称）。当有⼈要\n求你提供更多相关信息时，请编辑你的贴⼦来补充它们[译注：⽽不是发⼀个回帖或回答！]。如果你觉得⼀个答案\n对你有帮助，点击向上的箭头来为它投票；如果⼀个答案提供了问题的正确解决⽅案，点击投票按钮下⽅的对勾来\n将它标记为正解。\nStack Exchange 已经成⻓到超过⼀百个⽹站，以下是最常⽤的⼏个站：\nSuper User 是问⼀些通⽤的电脑问题，如果你的问题跟代码或是写程序⽆关，只是⼀些⽹络连线之类的，请\n到这⾥。\nStack Overflow 是问写程序有关的问题。\nServer Fault 是问服务器和⽹管相关的问题。\n⽹站和 IRC 论坛",
      "metadata": {
        "chunk_id": 5,
        "page_number": 5,
        "page_range": "5",
        "word_count": 75
      }
    },
    {
      "content": "本地的⽤户群组（user group），或者你所⽤的 Linux 发⾏版本也许正在宣传他们的⽹⻚论坛或 IRC 频道，并提供\n新⼿帮助（在⼀些⾮英语国家，新⼿论坛很可能还是邮件列表），这些都是开始提问的好地⽅，特别是当你觉得遇\n到的也许只是相对简单或者很普通的问题时。有⼴告赞助的 IRC 频道是公开欢迎提问的地⽅，通常可以即时得到回\n应。\n事实上，如果程序出的问题只发⽣在特定 Linux 发⾏版提供的版本（这很常⻅），最好先去该发⾏版的论坛或邮件\n列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项⽬的⿊客可能仅仅回复“使⽤我们的版本”。\n在任何论坛发⽂以前，先确认⼀下有没有搜索功能。如果有，就试着搜索⼀下问题的⼏个关键词，也许这会有帮\n助。如果在此之前你已做过通⽤的⽹⻚搜索（你也该这样做），还是再搜索⼀下论坛，搜索引擎有可能没来得及索\n引此论坛的全部内容。\n通过论坛或 IRC 频道来提供⽤户⽀持服务有增⻓的趋势，电⼦邮件则⼤多为项⽬开发者间的交流⽽保留。所以最好\n先在论坛或 IRC 中寻求与该项⽬相关的协助。\n在使⽤ IRC 的时候，⾸先最好不要发布很⻓的问题描述，有些⼈称之为频道洪⽔。最好通过⼀句话的问题描述来开\n始聊天。\n第⼆步，使⽤项⽬邮件列表\n \n \n当某个项⽬提供开发者邮件列表时，要向列表⽽不是其中的个别成员提问，即使你确信他能最好地回答你的问题。\n查⼀查项⽬的⽂件和⾸⻚，找到项⽬的邮件列表并使⽤它。有⼏个很好的理由⽀持我们采⽤这种办法：\n任何好到需要向个别开发者提出的问题，也将对整个项⽬群组有益。反之，如果你认为⾃⼰的问题对整个项⽬\n群组来说太愚蠢，那这也不能成为骚扰个别开发者的理由。\n向列表提问可以分散开发者的负担，个别开发者（尤其是项⽬领导⼈）也许太忙以⾄于没法回答你的问题。\n⼤多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其他\n⼈可以通过⽹⻚搜索找到你的问题和答案，也就不⽤再次发问了。\n如果某些问题经常被问到，开发者可以利⽤此信息来改进说明⽂件或软件本身，以使其更清楚。如果只是私下\n提问，就没有⼈能看到最常⻅问题的完整场景。\n如果⼀个项⽬既有“⽤户”也有“开发者”（或“⿊客”）邮件列表或论坛，⽽你⼜不会动到那些源代码，那么就向“⽤户”\n列表或论坛提问。不要假设⾃⼰会在开发者列表中受到欢迎，那些⼈多半会将你的提问视为⼲扰他们开发的噪⾳。\n然⽽，如果你确信你的问题很特别，⽽且在“⽤户”列表或论坛中⼏天都没有回复，可以试试前往“开发者”列表或论\n坛发问。建议你在张贴前最好先暗地⾥观察⼏天以了解那⾥的⾏事⽅式（事实上这是参与任何私有或半私有列表的\n好主意）\n如果你找不到⼀个项⽬的邮件列表，⽽只能查到项⽬维护者的电⼦邮件地址，尽管向他发信。即使是在这种情况\n下，也别假设（项⽬）邮件列表不存在。在你的电⼦邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提\n及你不反对将⾃⼰的邮件转发给他⼈（许多⼈认为，即使没什么秘密，私⼈电⼦邮件也不应该被公开。通过允许将\n你的电⼦邮件转发他⼈，你给了相应⼈员处置你邮件的选择）。\n使⽤有意义且描述明确的标题",
      "metadata": {
        "chunk_id": 6,
        "page_number": 6,
        "page_range": "6",
        "word_count": 48
      }
    },
    {
      "content": "在邮件列表、新闻群组或论坛中，⼤约 50 字以内的标题是抓住资深专家注意⼒的好机会。别⽤喋喋不休的帮帮\n忙、跪求、急（更别说救命啊！！！！这样让⼈反感的话，⽤这种标题会被条件反射式地忽略）来浪费这个机\n会。不要妄想⽤你的痛苦程度来打动我们，⽽应该是在这点空间中使⽤极简单扼要的描述⽅式来提出问题。\n⼀个好标题范例是⽬标 —— 差异式的描述，许多技术⽀持组织就是这样做的。在⽬标部分指出是哪⼀个或哪⼀组\n东⻄有问题，在差异部分则描述与期望的⾏为不⼀致的地⽅。\n蠢问题：救命啊！我的笔记本电脑不能正常显示了！\n聪明问题：X.org 6.8.1 的⿏标指针会变形，某牌显卡 MV1005 芯⽚组。\n更聪明问题：X.org 6.8.1 的⿏标指针，在某牌显卡 MV1005 芯⽚组环境下 - 会变形。\n编写⽬标 —— 差异 式描述的过程有助于你组织对问题的细致思考。是什么被影响了？ 仅仅是⿏标指针或者还有其\n它图形？只在 X.org 的 X 版中出现？或只是出现在 6.8.1 版中？ 是针对某牌显卡芯⽚组？或者只是其中的 MV1005 \n型号？ ⼀个⿊客只需瞄⼀眼就能够⽴即明⽩你的环境和你遇到的问题。\n总⽽⾔之，请想像⼀下你正在⼀个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，\n可使下⼀个搜索类似问题的⼈能够关注这个讨论串，⽽不⽤再次提问相同的问题。\n如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问⼀个问题， ⼀个看起来像 Re: 测试 或者 \nRe: 新 bug  的标题很难引起⾜够重视。另外，在不影响连贯性之下，适当引⽤并删减前⽂的内容，能给新来的读\n者留下线索。\n对于讨论串，不要直接点击回复来开始⼀个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，⽐如 \nmutt ，允许⽤户按讨论串排序并通过折叠讨论串来隐藏消息，这样做的⼈永远看不到你发的消息。\n仅仅改变标题还不够。mutt 和其它⼀些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。\n所以宁可发⼀个全新的邮件。\n在⽹⻚论坛上，好的提问⽅式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到⾥⾯的\n内容，故通过回复提问，⽽⾮改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，⽽且这样做了\n基本上没有⼈会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的⼈读到。\n所以，除⾮你只想在该讨论串当前活跃的⼈群中提问，不然还是另起炉灶⽐较好。\n使问题容易回复\n \n \n以请将你的回复发送到…… 来结束你的问题多半会使你得不到回答。如果你觉得花⼏秒钟在邮件客户端设置⼀下回复\n地址都麻烦，我们也觉得花⼏秒钟思考你的问题更麻烦。如果你的邮件程序不⽀持这样做，换个好点的；如果是操\n作系统不⽀持这种邮件程序，也换个好点的。\n在论坛，要求通过电⼦邮件回复是⾮常⽆礼的，除⾮你认为回复的信息可能⽐较敏感（有⼈会为了某些未知的原\n因，只让你⽽不是整个论坛知道答案）。如果你只是想在有⼈回复讨论串时得到电⼦邮件提醒，可以要求⽹⻚论坛\n发送给你。⼏乎所有论坛都⽀持诸如追踪此讨论串、有回复时发送邮件提醒等功能。\n使⽤清晰、正确、精准且合乎语法的语句\n \n \n我们从经验中发现，粗⼼的提问者通常也会粗⼼地写程序与思考（我敢打包票）。回答粗⼼⼤意者的问题很不值\n得，我们宁愿把时间耗在别处。",
      "metadata": {
        "chunk_id": 7,
        "page_number": 7,
        "page_range": "7",
        "word_count": 71
      }
    },
    {
      "content": "正确的拼写、标点符号和⼤⼩写是很重要的。⼀般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得\n麻烦，不想在乎你的提问。花点额外的精⼒斟酌⼀下字句，⽤不着太僵硬与正式 —— 事实上，⿊客⽂化很看重能\n准确地使⽤⾮正式、俚语和幽默的语句。但它必须很准确，⽽且有迹象表明你是在思考和关注问题。\n正确地拼写、使⽤标点和⼤⼩写，不要将its 混淆为it's ，loose 搞成lose 或者将discrete 弄成discreet 。\n不要全部⽤⼤写，这会被视为⽆礼的⼤声嚷嚷（全部⼩写也好不到哪去，因为不易阅读。Alan Cox 也许可以这样\n做，但你不⾏）。\n更⽩话的说，如果你写得像是个半⽂盲[译注：⼩⽩]，那多半得不到理睬。也不要使⽤即时通信中的简写或⽕星\n⽂，如将的简化为d 会使你看起来像⼀个为了少打⼏个键⽽省字的⼩⽩。更糟的是，如果像个⼩孩似地⻤画符那\n绝对是在找死，可以肯定没⼈会理你（或者最多是给你⼀⼤堆指责与挖苦）。\n如果在使⽤⾮⺟语的论坛提问，你可以犯点拼写和语法上的⼩错，但决不能在思考上⻢⻁（没错，我们通常能弄清\n两者的分别）。同时，除⾮你知道回复者使⽤的语⾔，否则请使⽤英语书写。繁忙的⿊客⼀般会直接删除⽤他们看\n不懂的语⾔写的消息。在⽹络上英语是通⽤语⾔，⽤英语书写可以将你的问题在尚未被阅读就被直接删除的可能性\n降到最低。\n如果英⽂是你的外语（Second language），提示潜在回复者你有潜在的语⾔困难是很好的： [译注：以下附上原\n⽂以供使⽤]\nEnglish is not my native language; please excuse typing errors.\n英⽂不是我的⺟语，请原谅我的错字或语法。\nIf you speak $LANGUAGE, please email/PM me; I may need assistance translating my question.\n如果你说某语⾔，请向我发电邮/私信；\n我需要有⼈协助我翻译我的问题。\nI am familiar with the technical terms, but some slang expressions and idioms are difficult for me.\n我对技术名词很熟悉，但对于俗语或是特别⽤法不甚了解。\nI've posted my question in $LANGUAGE and English. I'll be glad to translate responses, if you only use \none or the other.\n我把我的问题⽤某语⾔和英⽂写出来。\n如果你只⽤其中的⼀种语⾔回答，我会乐意将回复翻译成为你使⽤的语⾔。\n使⽤易于读取且标准的⽂件格式发送问题\n \n \n如果你⼈为地将问题搞得难以阅读，它多半会被忽略，⼈们更愿读易懂的问题，所以：\n使⽤纯⽂字⽽不是 HTML (关闭 HTML 并不难）。\n使⽤ MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），⽽不仅仅是邮件程序⽣\n成的模板（譬如只是信件内容的拷⻉）。\n不要发送⼀段⽂字只是⼀⾏句⼦但⾃动换⾏后会变成多⾏的邮件（这使得回复部分内容⾮常困难）。设想你的\n读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换⾏分割点⼩于 80 字。\n但是，对⼀些特殊的⽂件不要设置固定宽度（譬如⽇志⽂件拷⻉或会话记录）。数据应该原样包含，让回复者\n有信⼼他们看到的是和你看到的⼀样的东⻄。",
      "metadata": {
        "chunk_id": 8,
        "page_number": 8,
        "page_range": "8",
        "word_count": 117
      }
    },
    {
      "content": "在英语论坛中，不要使⽤Quoted-Printable  MIME 编码发送消息。这种编码对于张贴⾮ ASCII 语⾔可能是\n必须的，但很多邮件程序并不⽀持这种编码。当它们处理换⾏时，那些⽂本中四处散布的=20 符号既难看也\n分散注意⼒，甚⾄有可能破坏内容的语意。\n绝对，永远不要指望⿊客们阅读使⽤封闭格式编写的⽂档，像微软公司的 Word 或 Excel ⽂件等。⼤多数⿊客\n对此的反应就像有⼈将还在冒热⽓的猪粪倒在你家⻔⼝时你的反应⼀样。即便他们能够处理，他们也很厌恶这\n么做。\n如果你从使⽤ Windows 的电脑发送电⼦邮件，关闭微软愚蠢的智能引号功能 （从[选项] > [校订] > [⾃动校正\n选项]，勾选掉智能引号单选框），以免在你的邮件中到处散布垃圾字符。\n在论坛，勿滥⽤表情符号和HTML 功能（当它们提供时）。⼀两个表情符号通常没有问题，但花哨的彩⾊⽂本\n倾向于使⼈认为你是个⽆能之辈。过滥地使⽤表情符号、⾊彩和字体会使你看来像个傻笑的⼩姑娘。这通常不\n是个好主意，除⾮你只是对性⽽不是对答案感兴趣。\n如果你使⽤图形⽤户界⾯的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不⼀定满⾜\n这些要求。⼤多数这类程序有基于选单的查看源代码命令，⽤它来检查发送⽂件夹中的邮件，以确保发送的是纯⽂\n本⽂件同时没有⼀些奇怪的字符。\n精确地描述问题并⾔之有物\n \n \n仔细、清楚地描述你的问题或 Bug 的症状。\n描述问题发⽣的环境（机器配置、操作系统、应⽤程序、以及相关的信息），提供经销商的发⾏版和版本号\n（如：Fedora Core 4 、Slackware 9.1 等）。\n描述在提问前你是怎样去研究和理解这个问题的。\n描述在提问前为确定问题⽽采取的诊断步骤。\n描述最近做过什么可能相关的硬件或软件变更。\n尽可能地提供⼀个可以重现这个问题的可控环境的⽅法。\n尽量去揣测⼀个⿊客会怎样反问你，在你提问之前预先将⿊客们可能提出的问题回答⼀遍。\n以上⼏点中，当你报告的是你认为可能在代码中的问题时，给⿊客⼀个可以重现你的问题的环境尤其重要。当你这\n么做时，你得到有效的回答的机会和速度都会⼤⼤的提升。\nSimon Tatham 写过⼀篇名为《如何有效地报告Bug》的出⾊⽂章。强⼒推荐你也读⼀读。\n话不在多⽽在精\n \n \n你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你\n有庞⼤⽽复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越⼩越好。\n这样做的⽤处⾄少有三点。 第⼀，表现出你为简化问题付出了努⼒，这可以使你得到回答的机会增加； 第⼆，简\n化问题使你更有可能得到有⽤的答案； 第三，在精炼你的 bug 报告的过程中，你很可能就⾃⼰找到了解决⽅法或\n权宜之计。\n别动辄声称找到 Bug",
      "metadata": {
        "chunk_id": 9,
        "page_number": 9,
        "page_range": "9",
        "word_count": 67
      }
    },
    {
      "content": "当你在使⽤软件中遇到问题，除⾮你⾮常、⾮常的有根据，不要动辄声称找到了 Bug。提示：除⾮你能提供解决问\n题的源代码补丁，或者提供回归测试来表明前⼀版本中⾏为不正确，否则你都多半不够完全确信。这同样适⽤在⽹\n⻚和⽂件，如果你（声称）发现了⽂件的Bug ，你应该能提供相应位置的修正或替代⽂件。\n请记得，还有其他许多⽤户没遇到你发现的问题，否则你在阅读⽂件或搜索⽹⻚时就应该发现了（你在抱怨前已经\n做了这些，是吧？）。这也意味着很有可能是你弄错了⽽不是软件本身有问题。\n编写软件的⼈总是⾮常⾟苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能⼒，即使你是对\n的，也有可能会冒犯到其中某部分⼈。当你在标题中嚷嚷着有Bug 时，这尤其严重。\n提问时，即使你私下⾮常确信已经发现⼀个真正的 Bug，最好写得像是你做错了什么。如果真的有 Bug，你会在回\n复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总⽐你惹恼别⼈然后⽋别⼈⼀个道歉要好⼀\n点。\n低声下⽓不能代替你的功课\n \n \n有些⼈明⽩他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另⼀个极端 —— 低声下⽓：我知道我只是个可\n悲的新⼿，⼀个失败者，但... 。这既使⼈困扰，也没有⽤，尤其是伴随着与实际问题含糊不清的描述时更令⼈反\n感。\n别⽤原始灵⻓类动物的把戏来浪费你我的时间。取⽽代之的是，尽可能清楚地描述背景条件和你的问题情况。这⽐\n低声下⽓更好地定位了你的位置。\n有时⽹⻚论坛会设有专为新⼿提问的版⾯，如果你真的认为遇到了初学者的问题，到那去就是了，但⼀样别那么低\n声下⽓。\n描述问题症状⽽⾮你的猜测\n \n \n告诉⿊客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还⽤向别⼈求助吗？），因此要确\n信你原原本本告诉了他们问题的症状，⽽不是你的解释和理论；让⿊客们来推测和诊断。如果你认为陈述⾃⼰的猜\n测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作⽤。\n蠢问题\n我在编译内核时接连遇到 SIG11 错误， 我怀疑某条⻜线搭在主板的⾛线上了，这种情况应该怎样检查最好？\n聪明问题\n我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6/233 CPU（威盛 Apollo VP2 芯⽚组）， 256MB Corsair \nPC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产⽣ SIG11 错误， 但是在头 20 分钟内从\n没发⽣过相同的问题。重新启动也没有⽤，但是关机⼀晚上就⼜能⼯作 20 分钟。 所有内存都换过了，没有\n效果。相关部分的标准编译记录如下…\n由于以上这点似乎让许多⼈觉得难以配合，这⾥有句话可以提醒你：所有的诊断专家都来⾃密苏⾥州。 美国国务院的\n官⽅座右铭则是：让我看看（出⾃国会议员 Willard D. Vandiver 在 1899 年时的讲话：我来⾃⼀个出产⽟⽶，棉花，\n⽜蒡和⺠主党⼈的国家，滔滔雄辩既不能说服我，也不会让我满意。我来⾃密苏⾥州，你必须让我看看。） 针对诊断者⽽\n⾔，这并不是⼀种怀疑，⽽只是⼀种真实⽽有⽤的需求，以便让他们看到的是与你看到的原始证据尽可能⼀致的东\n⻄，⽽不是你的猜测与归纳的结论。所以，⼤⽅地展示给我们看吧！",
      "metadata": {
        "chunk_id": 10,
        "page_number": 10,
        "page_range": "10",
        "word_count": 77
      }
    },
    {
      "content": "按发⽣时间先后列出问题症状\n \n \n问题发⽣前的⼀系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明⾥应该包含你的操作步骤，以及\n机器和软件的反应，直到问题发⽣。在命令⾏处理的情况下，提供⼀段操作记录（例如运⾏脚本⼯具所⽣成的），\n并引⽤相关的若⼲⾏（如 20 ⾏）记录会⾮常有帮助。\n如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，多不等\n于好。试着选取适当的调试级别以便提供有⽤的信息⽽不是让读者淹没在垃圾中。\n如果你的说明很⻓（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样⿊客们在读\n你的记录时就知道该注意哪些内容了。\n描述⽬标⽽不是过程\n \n \n如果你想弄清楚如何做某事（⽽不是报告⼀个 Bug），在开头就描述你的⽬标，然后才陈述重现你所卡住的特定步\n骤。\n经常寻求技术帮助的⼈在⼼中有个更⾼层次的⽬标，⽽他们在⾃以为能达到⽬标的特定道路上被卡住了，然后跑来\n问该怎么⾛，但没有意识到这条路本身就有问题。结果要费很⼤的劲才能搞定。\n蠢问题\n我怎样才能从某绘图程序的颜⾊选择器中取得⼗六进制的 RGB 值？\n聪明问题\n我正试着⽤替换⼀幅图⽚的⾊码（color table）成⾃⼰选定的⾊码，我现在知道的唯⼀⽅法是编辑每个⾊码\n区块（table slot）， 但却⽆法从某绘图程序的颜⾊选择器取得⼗六进制的 RGB 值。\n第⼆种提问法⽐较聪明，你可能得到像是建议采⽤另⼀个更合适的⼯具的回复。\n别要求使⽤私⼈电邮回复\n \n \n⿊客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的⼈注意到不完整或者不当之处，最初的回复\n才能够、也应该被纠正。同时，作为提供帮助者可以得到⼀些奖励，奖励就是他的能⼒和学识被其他同⾏看到。\n当你要求私下回复时，这个过程和奖励都被中⽌。别这样做，让回复者来决定是否私下回答 —— 如果他真这么做\n了，通常是因为他认为问题编写太差或者太肤浅，以⾄于不可能使其他⼈产⽣兴趣。\n这条规则存在⼀条有限的例外，如果你确信提问可能会引来⼤量雷同的回复时，那么这个神奇的提问句会是向我发\n电邮，我将为论坛归纳这些回复。试着将邮件列表或新闻群组从洪⽔般的雷同回复中解救出来是⾮常有礼貌的 —— \n但你必须信守诺⾔。\n清楚明确地表达你的问题以及需求\n \n \n漫⽆边际的提问是近乎⽆休⽆⽌的时间⿊洞。最有可能给你有⽤答案的⼈通常也正是最忙的⼈（他们忙是因为要亲\n⾃完成⼤部分⼯作）。这样的⼈对⽆节制的时间⿊洞相当厌恶，所以他们也倾向于厌恶那些漫⽆边际的提问。",
      "metadata": {
        "chunk_id": 11,
        "page_number": 11,
        "page_range": "11",
        "word_count": 45
      }
    },
    {
      "content": "如果你明确表述需要回答者做什么（如提供指点、发送⼀段代码、检查你的补丁、或是其他等等），就最有可能得\n到有⽤的答案。因为这会定出⼀个时间和精⼒的上限，便于回答者能集中精⼒来帮你。这么做很棒。\n要理解专家们所处的世界，请把专业技能想像为充裕的资源，⽽回复的时间则是稀缺的资源。你要求他们奉献的时\n间越少，你越有可能从真正专业⽽且很忙的专家那⾥得到解答。\n所以，界定⼀下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你获得有⽤的答\n案相当有帮助 —— 但这技巧通常和简化问题有所区别。因此，问我想更好地理解 X，可否指点⼀下哪有好⼀点说明？\n通常⽐问你能解释⼀下 X 吗？更好。如果你的代码不能运作，通常请别⼈看看哪⾥有问题，⽐要求别⼈替你改正要\n明智得多。\n询问有关代码的问题时\n \n \n如果没有提示别⼈应该从何⼊⼿，别要求他⼈帮你调试有问题的代码。张贴⼏百⾏的代码，然后说⼀声：它不能⼯\n作会让你完全被忽略。只贴⼏⼗⾏代码，然后说⼀句：在第七⾏以后，我期待它显示 <x>，但实际出现的是 <y> ⽐较\n有可能让你得到回应。\n最有效描述程序问题的⽅法是提供最精简的 Bug 展示测试⽤例（bug-demonstrating test case）。什么是最精简\n的测试⽤例？那是问题的缩影；⼀⼩个程序⽚段能刚好展示出程序的异常⾏为，⽽不包含其他令⼈分散注意⼒的内\n容。怎么制作最精简的测试⽤例？如果你知道哪⼀⾏或哪⼀段代码会造成异常的⾏为，复制下来并加⼊⾜够重现这\n个状况的代码（例如，⾜以让这段代码能被编译/直译/被应⽤程序处理）。如果你⽆法将问题缩减到⼀个特定区\n块，就复制⼀份代码并移除不影响产⽣问题⾏为的部分。总之，测试⽤例越⼩越好（查看话不在多⽽在精⼀节）。\n⼀般⽽⾔，要得到⼀段相当精简的测试⽤例并不太容易，但永远先尝试这样做是⼀个好习惯。这种⽅式可以帮助你\n了解如何⾃⾏解决这个问题 —— ⽽且即使你的尝试不成功，⿊客们也会看到你在尝试取得答案的过程中付出了努\n⼒，这可以让他们更愿意与你合作。\n如果你只是想让别⼈帮忙审查（Review）⼀下代码，在信的开头就要说出来，并且⼀定要提到你认为哪⼀部分特别\n需要关注以及为什么。\n别把⾃⼰家庭作业的问题贴上来\n \n \n⿊客们很擅⻓分辨哪些问题是家庭作业式的问题；因为我们中的⼤多数都曾⾃⼰解决这类问题。同样，这些问题得\n由你来搞定，你会从中学到东⻄。你可以要求给点提示，但别要求得到完整的解决⽅案。\n如果你怀疑⾃⼰碰到了⼀个家庭作业式的问题，但仍然⽆法解决，试试在⽤户群组，论坛或（最后⼀招）在项⽬的\n⽤户邮件列表或论坛中提问。尽管⿊客们会看出来，但⼀些有经验的⽤户也许仍会给你⼀些提示。\n去掉⽆意义的提问句\n \n \n避免⽤⽆意义的话结束提问，例如有⼈能帮我吗？或者这有答案吗？。\n⾸先：如果你对问题的描述不是很好，这样问更是画蛇添⾜。\n其次：由于这样问是画蛇添⾜，⿊客们会很厌烦你 —— ⽽且通常会⽤逻辑上正确，但毫⽆意义的回答来表示他们\n的蔑视， 例如：没错，有⼈能帮你或者不，没答案。\n⼀般来说，避免⽤ 是或否、对或错、有或没有类型的问句，除⾮你想得到是或否类型的回答。",
      "metadata": {
        "chunk_id": 12,
        "page_number": 12,
        "page_range": "12",
        "word_count": 51
      }
    },
    {
      "content": "即使你很急也不要在标题写紧急\n \n \n这是你的问题，不是我们的。宣称紧急极有可能事与愿违：⼤多数⿊客会直接删除⽆礼和⾃私地企图即时引起关注\n的问题。更严重的是，紧急这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 —— 你希望能\n看到你问题的⼈可能永远也看不到。\n有半个例外的情况是，如果你是在⼀些很⾼调，会使⿊客们兴奋的地⽅，也许值得这样去做。在这种情况下，如果\n你有时间压⼒，也很有礼貌地提到这点，⼈们也许会有兴趣回答快⼀点。\n当然，这⻛险很⼤，因为⿊客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space \nStation）发这样的标题没有问题，但⽤⾃我感觉良好的慈善⾏为或政治原因发肯定不⾏。事实上，张贴诸如紧急：\n帮我救救这个⽑茸茸的⼩海豹！肯定让你被⿊客忽略或惹恼他们，即使他们认为⽑茸茸的⼩海豹很重要。\n如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读⼏遍，直到你弄懂了再发⽂。\n礼多⼈不怪，⽽且有时还很有帮助\n \n \n彬彬有礼，多⽤请和谢谢您的关注，或谢谢你的关照。让⼤家都知道你对他们花时间免费提供帮助⼼存感激。\n坦⽩说，这⼀点并没有⽐使⽤清晰、正确、精准且合乎语法和避免使⽤专⽤格式重要（也不能取⽽代之）。⿊客们\n⼀般宁可读有点唐突但技术上鲜明的 Bug 报告，⽽不是那种有礼但含糊的报告。（如果这点让你不解，记住我们\n是按问题能教给我们什么来评价问题的价值的）\n然⽽，如果你有⼀串的问题待解决，客⽓⼀点肯定会增加你得到有⽤回应的机会。\n（我们注意到，⾃从本指南发布后，从资深⿊客那⾥得到的唯⼀严重缺陷反馈，就是对预先道谢这⼀条。⼀些⿊客\n觉得先谢了意味着事后就不⽤再感谢任何⼈的暗示。我们的建议是要么先说先谢了，然后事后再对回复者表示感\n谢，或者换种⽅式表达感激，譬如⽤谢谢你的关注或谢谢你的关照。）\n问题解决后，加个简短的补充说明\n \n \n问题解决后，向所有帮助过你的⼈发个说明，让他们知道问题是怎样解决的，并再⼀次向他们表示感谢。如果问题\n在新闻组或者邮件列表中引起了⼴泛关注，应该在那⾥贴⼀个说明⽐较恰当。\n最理想的⽅式是向最初提问的话题回复此消息，并在标题中包含已修正，已解决或其它同等含义的明显标记。在\n⼈来⼈往的邮件列表⾥，⼀个看⻅讨论串问题 X 和问题 X - 已解决的潜在回复者就明⽩不⽤再浪费时间了（除⾮\n他个⼈觉得问题 X 有趣），因此可以利⽤此时间去解决其它问题。\n补充说明不必很⻓或是很深⼊；简单的⼀句你好，原来是⽹线出了问题！谢谢⼤家 – Bill ⽐什么也不说要来的好。\n事实上，除⾮结论真的很有技术含量，否则简短可爱的⼩结⽐⻓篇⼤论更好。说明问题是怎样解决的，但⼤可不必\n将解决问题的过程复述⼀遍。\n对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此之后才\n指明可以避免的盲点。避免盲点的部分应放在正确的解决⽅案和其它总结材料之后，⽽不要将此信息搞成侦探推理\n⼩说。列出那些帮助过你的名字，会让你交到更多朋友。\n除了有礼貌和有内涵以外，这种类型的补充也有助于他⼈在邮件列表/新闻群组/论坛中搜索到真正解决你问题的⽅\n案，让他们也从中受益。",
      "metadata": {
        "chunk_id": 13,
        "page_number": 13,
        "page_range": "13",
        "word_count": 50
      }
    },
    {
      "content": "⾄少，这种补充有助于让每位参与协助的⼈因问题的解决⽽从中得到满⾜感。如果你⾃⼰不是技术专家或者⿊客，\n那就相信我们，这种感觉对于那些你向他们求助的⼤师或者专家⽽⾔，是⾮常重要的。问题悬⽽未决会让⼈灰⼼；\n⿊客们渴望看到问题被解决。好⼈有好报，满⾜他们的渴望，你会在下次提问时尝到甜头。\n思考⼀下怎样才能避免他⼈将来也遇到类似的问题，⾃问写⼀份⽂件或加个常⻅问题（FAQ）会不会有帮助。如果\n是的话就将它们发给维护者。\n在⿊客中，这种良好的后继⾏动实际上⽐传统的礼节更为重要，也是你如何透过善待他⼈⽽赢得声誉的⽅式，这是\n⾮常有价值的资产。\n如何解读答案\n \n \n \nRTFM 和 STFW：如何知道你已完全搞砸了\n \n \n有⼀个古⽼⽽神圣的传统：如果你收到RTFM（Read The Fucking Manual）的回应，回答者认为你应该去读他妈\n的⼿册。当然，基本上他是对的，你应该去读⼀读。\nRTFM 有⼀个年轻的亲戚。如果你收到STFW（Search The Fucking Web）的回应，回答者认为你应该到他妈的⽹\n上搜索。那⼈多半也是对的，去搜索⼀下吧。（更温和⼀点的说法是 Google 是你的朋友！）\n在论坛，你也可能被要求去爬爬论坛的旧⽂。事实上，有⼈甚⾄可能热⼼地为你提供以前解决此问题的讨论串。但\n不要依赖这种关照，提问前应该先搜索⼀下旧⽂。\n通常，⽤这两句之⼀回答你的⼈会给你⼀份包含你需要内容的⼿册或者⼀个⽹址，⽽且他们打这些字的时候也正在\n读着。这些答复意味着回答者认为：\n你需要的信息⾮常容易获得；\n你⾃⼰去搜索这些信息⽐灌给你，能让你学到更多。\n你不应该因此不爽；依照⿊客的标准，他已经表示了对你⼀定程度的关注，⽽没有对你的要求视⽽不⻅。你应该对\n他祖⺟般的慈祥表示感谢。\n如果还是搞不懂\n \n \n如果你看不懂回应，别⽴刻要求对⽅解释。像你以前试着⾃⼰解决问题时那样（利⽤⼿册，FAQ，⽹络，身边的⾼\n⼿），先试着去搞懂他的回应。如果你真的需要对⽅解释，记得表现出你已经从中学到了点什么。\n⽐⽅说，如果我回答你：看来似乎是 zentry 卡住了；你应该先清除它。，然后，这是⼀个很糟的后续问题回应：\nzentry 是什么？ 好的问法应该是这样：哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，⽽且\n还都没有清楚的解释如何清除它。你是指这两个中的哪⼀个吗？还是我看漏了什么？\n处理⽆礼的回应",
      "metadata": {
        "chunk_id": 14,
        "page_number": 14,
        "page_range": "14",
        "word_count": 48
      }
    },
    {
      "content": "很多⿊客圈⼦中看似⽆礼的⾏为并不是存⼼冒犯。相反，它是直截了当，⼀针⻅⾎式的交流⻛格，这种⻛格更注重\n解决问题，⽽不是使⼈感觉舒服⽽却模模糊糊。\n如果你觉得被冒犯了，试着平静地反应。如果有⼈真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会\n招呼他。如果这没有发⽣⽽你却发⽕了，那么你发⽕对象的⾔语可能在⿊客社区中看起来是正常的，⽽你将被视为\n有错的⼀⽅，这将伤害到你获取信息或帮助的机会。\n另⼀⽅⾯，你偶尔真的会碰到⽆礼和⽆聊的⾔⾏。与上述相反，对真正的冒犯者狠狠地打击，⽤犀利的语⾔将其驳\n得体⽆完肤都是可以接受的。然⽽，在⾏事之前⼀定要⾮常⾮常的有根据。纠正⽆礼的⾔论与开始⼀场毫⽆意义的\n⼝⽔战仅⼀线之隔，⿊客们⾃⼰莽撞地越线的情况并不鲜⻅。如果你是新⼿或外⼈，避开这种莽撞的机会并不⾼。\n如果你想得到的是信息⽽不是消磨时光，这时最好不要把⼿放在键盘上以免冒险。\n（有些⼈断⾔很多⿊客都有轻度的⾃闭症或亚斯伯格综合症，缺少⽤于润滑⼈类社会正常交往所需的神经。这既可\n能是真也可能是假的。如果你⾃⼰不是⿊客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪⾏为。只管这\n么⼲好了，我们不在乎。我们喜欢我们现在这个样⼦，并且通常对病患标记都有站得住脚的怀疑。）\nJeff Bigler 的观察总结和这个相关也值得⼀读 (tact filters)。\n在下⼀节，我们会谈到另⼀个问题，当你⾏为不当时所会受到的冒犯。\n如何避免扮演失败者\n \n \n在⿊客社区的论坛中，你以本指南所描述的或类似的⽅式，可能会有那么⼏次搞砸了。⽽你会在公开场合中被告知\n你是如何搞砸的，也许攻击的⾔语中还会带点夹七夹⼋的颜⾊。\n这种事发⽣以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被⾔语攻击、要求道歉、⾼声尖叫、憋闷⽓、威\n胁诉诸法律、向其雇主报怨、不去关⻢桶盖等等。相反地，你该这么做：\n熬过去，这很正常。事实上，它是有益健康且合理的。\n社区的标准不会⾃⾏维持，它们是通过参与者积极⽽公开地执⾏来维持的。不要哭嚎所有的批评都应该通过私下的\n邮件传送，它不是这样运作的。当有⼈评论你的⼀个说法有误或者提出不同看法时，坚持声称受到个⼈攻击也毫⽆\n益处，这些都是失败者的态度。\n也有其它的⿊客论坛，受过⾼礼节要求的误导，禁⽌参与者张贴任何对别⼈帖⼦挑⽑病的消息，并声称如果你不想\n帮助⽤户就闭嘴。 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫⽆意义的唠叨与⽆⽤的技术论坛。\n夸张的讲法是：你要的是“友善”（以上述⽅式）还是有⽤？两个⾥⾯挑⼀个。\n记着：当⿊客说你搞砸了，并且（⽆论多么刺⽿）告诉你别再这样做时，他正在为关⼼你和他的社区⽽⾏动。对他\n⽽⾔，不理你并将你从他的⽣活中滤掉更简单。如果你⽆法做到感谢，⾄少要表现得有点尊严，别⼤声哀嚎，也别\n因为⾃⼰是个有戏剧性超级敏感的灵魂和⾃以为有资格的新来者，就指望别⼈像对待脆弱的洋娃娃那样对你。\n有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些⼈也会⽆缘⽆故地攻击你本⼈。在这种情况\n下，抱怨倒是真的会把问题搞砸。\n这些来找麻烦的⼈要么是毫⽆办法但⾃以为是专家的不中⽤家伙，要么就是测试你是否真会搞砸的⼼理专家。其它\n读者要么不理睬，要么⽤⾃⼰的⽅式对付他们。这些来找麻烦的⼈在给他们⾃⼰找麻烦，这点你不⽤操⼼。\n也别让⾃⼰卷⼊⼝⽔战，最好不要理睬⼤多数的⼝⽔战 —— 当然，这是在你检验它们只是⼝⽔战，并且未指出你\n有搞砸的地⽅，同时也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。\n不该问的问题",
      "metadata": {
        "chunk_id": 15,
        "page_number": 15,
        "page_range": "15",
        "word_count": 43
      }
    },
    {
      "content": "不该问的问题\n \n \n以下是⼏个经典蠢问题，以及⿊客没回答时⼼中所想的：\n问题：我能在哪找到 X 程序或 X 资源？\n问题：我怎样⽤ X 做 Y？\n问题：如何设定我的 shell 提示？\n问题：我可以⽤ Bass-o-matic ⽂件转换⼯具将 AcmeCorp ⽂件转换为 TeX 格式吗？\n问题：我的程序/设定/SQL 语句没有⽤\n问题：我的 Windows 电脑有问题，你能帮我吗？\n问题：我的程序不会动了，我认为系统⼯具 X 有问题\n问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？\n问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别⼈的邮件呢？\n \n问题：我能在哪找到 X 程序或 X 资源？\n回答：就在我找到它的地⽅啊，⽩痴 —— 搜索引擎的那⼀头。天哪！难道还有⼈不会⽤ Google 吗？\n \n问题：我怎样⽤ X 做 Y？\n回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的⽅法。这种问题说明提问者不但对 X 完全⽆知，也对 Y \n要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种⼈，等他们把问题搞清楚了再说。\n \n问题：如何设定我的 shell 提示？？\n回答：如果你有⾜够的智慧提这个问题，你也该有⾜够的智慧去 RTFM，然后⾃⼰去找出来。\n \n问题：我可以⽤ Bass-o-matic ⽂件转换⼯具将 AcmeCorp ⽂件转换为 TeX 格式吗？\n回答：试试看就知道了。如果你试过，你就知道了答案，就不⽤浪费我的时间了。\n \n问题：我的{程序/设定/SQL 语句}没有⽤\n回答：这不算是问题吧，我对要我问你⼆⼗个问题才找得出你真正问题的问题没兴趣 —— 我有更有意思的事要做\n呢。在看到这类问题的时候，我的反应通常不外如下三种\n你还有什么要补充的吗？\n真糟糕，希望你能搞定。",
      "metadata": {
        "chunk_id": 16,
        "page_number": 16,
        "page_range": "16",
        "word_count": 80
      }
    },
    {
      "content": "这关我屁事？\n \n问题：我的 Windows 电脑有问题，你能帮我吗？\n回答：能啊，扔掉微软的垃圾，换个像 Linux 或 BSD 的开源操作系统吧。\n注意：如果程序有官⽅版 Windows 或者与 Windows 有互动（如 Samba），你可以问与 Windows 相关的问题，\n只是别对问题是由 Windows 操作系统⽽不是程序本身造成的回复感到惊讶， 因为 Windows ⼀般来说实在太烂，\n这种说法通常都是对的。\n \n问题：我的程序不会动了，我认为系统⼯具 X 有问题\n回答：你完全有可能是第⼀个注意到被成千上万⽤户反复使⽤的系统调⽤与函数库⽂件有明显缺陷的⼈，更有可能\n的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚⽽详尽的缺陷说明⽂\n件作后盾。\n \n问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？\n回答：不能，我只有亲⾃在你的电脑上动⼿才能找到⽑病。还是去找你当地的 Linux 使⽤群组者寻求实际的指导吧\n（你能在这⼉找到⽤户群组的清单）。\n注意：如果安装问题与某 Linux 的发⾏版有关，在它的邮件列表、论坛或本地⽤户群组中提问也许是恰当的。此\n时，应描述问题的准确细节。在此之前，先⽤ Linux  和所有被怀疑的硬件作关键词仔细搜索。\n \n问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别⼈的邮件呢？\n回答：想要这样做，说明了你是个卑鄙⼩⼈；想找个⿊客帮你，说明你是个⽩痴！\n好问题与蠢问题\n \n \n最后，我将透过举⼀些例⼦，来说明怎样聪明的提问；同⼀个问题的两种问法被放在⼀起，⼀种是愚蠢的，另⼀种\n才是明智的。\n蠢问题：\n我可以在哪⼉找到关于 Foonly Flurbamatic 的资料？\n这种问法⽆⾮想得到 STFW 这样的回答。\n聪明问题：\n我⽤ Google 搜索过 \"Foonly Flurbamatic 2600\"，但是没找到有⽤的结果。谁知道上哪⼉去找对这种设备编\n程的资料？\n这个问题已经 STFW 过了，看起来他真的遇到了麻烦。\n蠢问题：",
      "metadata": {
        "chunk_id": 17,
        "page_number": 17,
        "page_range": "17",
        "word_count": 73
      }
    },
    {
      "content": "我从 foo 项⽬找来的源码没法编译。它怎么这么烂？\n他觉得都是别⼈的错，这个傲慢⾃⼤的提问者。\n聪明问题：\nfoo 项⽬代码在 Nulix 6.2 版下⽆法编译通过。我读过了 FAQ，但⾥⾯没有提到跟 Nulix 有关的问题。这是我\n编译过程的记录，我有什么做的不对的地⽅吗？\n提问者已经指明了环境，也读过了 FAQ，还列出了错误，并且他没有把问题的责任推到别⼈头上，他的问题值得被\n关注。\n蠢问题：\n我的主机板有问题了，谁来帮我？\n某⿊客对这类问题的回答通常是：好的，还要帮你拍拍背和换尿布吗？，然后按下删除键。\n聪明问题：\n我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作⽤，我⼜试了 A 、 B 和 C 。请注意当我尝试 C 时的奇\n怪现象。显然 florbish 正在 grommicking，但结果出⼈意料。通常在 Athlon MP 主机板上引起 \ngrommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？\n这个家伙，从另⼀个⻆度来看，值得去回答他。他表现出了解决问题的能⼒，⽽不是坐等天上掉答案。\n在最后⼀个问题中，注意告诉我答案和给我启示，指出我还应该做什么诊断⼯作之间微妙⽽⼜重要的区别。\n事实上，后⼀个问题源⾃于 2001 年 8 ⽉在 Linux 内核邮件列表（lkml）上的⼀个真实的提问。我（Eric）就是那\n个提出问题的⼈。我在 Tyan S2464 主板上观察到了这种⽆法解释的锁定现象，列表成员们提供了解决这⼀问题的\n重要信息。\n通过我的提问⽅法，我给了别⼈可以咀嚼玩味的东⻄；我设法让⼈们很容易参与并且被吸引进来。我显示了⾃⼰具\n备和他们同等的能⼒，并邀请他们与我共同探讨。通过告诉他们我所⾛过的弯路，以避免他们再浪费时间，我也表\n明了对他们宝贵时间的尊重。\n事后，当我向每个⼈表示感谢，并且赞赏这次良好的讨论经历的时候，⼀个 Linux 内核邮件列表的成员表示，他觉\n得我的问题得到解决并⾮由于我是这个列表中的名⼈，⽽是因为我⽤了正确的⽅式来提问。\n⿊客从某种⻆度来说是拥有丰富知识但缺乏⼈情味的家伙；我相信他是对的，如果我像个乞讨者那样提问，不论我\n是谁，⼀定会惹恼某些⼈或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。\n如果得不到回答\n \n \n如果仍得不到回答，请不要以为我们觉得⽆法帮助你。有时只是看到你问题的⼈不知道答案罢了。没有回应不代表\n你被忽视，虽然不可否认这种差别很难区分。\n总的来说，简单地重复张贴问题是个很糟的点⼦。这将被视为⽆意义的喧闹。有点耐⼼，知道你问题答案的⼈可能\n⽣活在不同的时区，可能正在睡觉，也有可能你的问题⼀开始就没有组织好。\n你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。\n有许多⽹上的以及本地的⽤户群组，由热情的软件爱好者（即使他们可能从没亲⾃写过任何软件）组成。通常⼈们\n组建这样的团体来互相帮助并帮助新⼿。",
      "metadata": {
        "chunk_id": 18,
        "page_number": 18,
        "page_range": "18",
        "word_count": 78
      }
    },
    {
      "content": "另外，你可以向很多商业公司寻求帮助，不论公司⼤还是⼩。别为要付费才能获得帮助⽽感到沮丧！毕竟，假使你\n的汽⻋发动机汽缸密封圈爆掉了 —— 完全可能如此 —— 你还得把它送到修⻋铺，并且为维修付费。就算软件没花\n费你⼀分钱，你也不能强求技术⽀持总是免费的。\n对像是 Linux 这种⼤众化的软件，每个开发者⾄少会对应到上万名⽤户。根本不可能由⼀个⼈来处理来⾃上万名⽤\n户的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相⽐，你所付出的也是微不⾜道的（通\n常封闭源代码软件的技术⽀持费⽤⽐开源软件的要⾼得多，且内容也没那么丰富）。\n如何更好地回答问题\n \n \n态度和善⼀点。 问题带来的压⼒常使⼈显得⽆礼或愚蠢，其实并不是这样。\n对初犯者私下回复。 对那些坦诚犯错之⼈没有必要当众羞辱，⼀个真正的新⼿也许连怎么搜索或在哪找常⻅问题都\n不知道。\n如果你不确定，⼀定要说出来！ ⼀个听起来权威的错误回复⽐没有还要糟，别因为听起来像个专家很好玩，就给别\n⼈乱指路。要谦虚和诚实，给提问者与同⾏都树个好榜样。\n如果帮不了忙，也别妨碍他。 不要在实际步骤上开玩笑，那样也许会毁了提问者的设置 —— 有些可怜的呆⽠会把\n它当成真的指令。\n试探性的反问以引出更多的细节。 如果你做得好，提问者可以学到点东⻄ —— 你也可以。试试将蠢问题转变成好\n问题，别忘了我们都曾是新⼿。\n尽管对那些懒⾍抱怨⼀声 RTFM 是正当的，但能给出⽂档的链接（即使只是建议个 Google 搜索关键词）会更好。\n如果你决定回答，就请给出好的答案。 当别⼈正在⽤错误的⼯具或⽅法时别建议笨拙的权宜之计\n（workaround），应推荐更好的⼯具，重新界定问题。\n正⾯地回答问题！ 如果这个提问者已经很深⼊的研究⽽且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结\n果，回答 试试看 A 或是 B  或者 试试 X 、 Y 、 Z 、 A 、 B 、 C  并附上⼀个链接⼀点⽤都没有。\n帮助你的社区从问题中学习。 当回复⼀个好问题时，问问⾃⼰如何修改相关⽂件或常⻅问题⽂件以免再次解答同样的问\n题？，接着再向⽂件维护者发⼀份补丁。\n如果你在研究⼀番后才作出了回答，展现你的技巧⽽不是直接端出结果。毕竟授⼈以⻥不如授⼈以渔。\n相关资源\n \n \n如果你需要个⼈电脑、Unix 系统和⽹络如何运作的基础知识，参阅 Unix 系统和⽹络基本原理。\n当你发布软件或补丁时，试着按软件发布实践操作。\n鸣谢\n \n \nEvelyn Mitchel 贡献了⼀些愚蠢问题例⼦并启发了编写如何更好地回答问题这⼀节， Mikhail Ramendik 贡献了⼀些\n特别有价值的建议和改进。",
      "metadata": {
        "chunk_id": 19,
        "page_number": 19,
        "page_range": "19",
        "word_count": 90
      }
    }
  ]
}